{"version":3,"sources":["components/Heure.jsx","components/Navigation.jsx","App.js","pages/connecteur/Conjonction.js","pages/connecteur/Disjonction.js","pages/connecteur/Equivalence.js","pages/connecteur/Implication.js","pages/connecteur/Negation.js","pages/Connecteurs.js","pages/quantificateur/Existence.js","pages/quantificateur/Universel.js","pages/mot-cle/IlExiste.js","pages/mot-cle/Montrons.js","pages/mot-cle/Posons.js","pages/mot-cle/Soit.js","pages/mot-cle/Supposons.js","pages/liste/LC.js","pages/liste/LPU.js","pages/liste/Phrase.js","index.js"],"names":["Heure","affichZero","nombre","useTime","format","seconds","minutes","hours","className","style","textAlign","fontSize","Navigation","Navbar","bg","expand","Container","Nav","Link","href","NavDropdown","title","id","Item","Divider","App","Button","name","class","role","Conjonction","Card","Header","as","Body","to","Title","Text","Table","responsive","variant","Disjonction","CardGroup","Img","src","Footer","Equivalence","Implication","Negation","useState","open","setOpen","onClick","Collapse","in","Connecteurs","Existence","Universel","IlExiste","Montrons","Posons","Soit","Supposons","LC","LPU","Phrase","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.5db8e114.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useTime } from 'react-timer-hook';\r\nimport './Heure.css';\r\nconst Heure = () => {\r\n  function affichZero(nombre) {\r\n    return nombre < 10 ? '0' + nombre : nombre;\r\n  }\r\n  const { seconds, minutes, hours } = useTime({ format: '24-hour' });\r\n  return (\r\n    <div className=\"Heure\">\r\n      <div style={{ textAlign: 'center' }}>\r\n        <div style={{ fontSize: '20px' }}>\r\n          <span>{hours}</span>:<span>{affichZero(minutes)}</span>:\r\n          <span>{affichZero(seconds)}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Heure;\r\n","import React from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { NavDropdown } from 'react-bootstrap';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap';\r\nimport Button from '@restart/ui/esm/Button';\r\nimport Heure from './Heure';\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" expand=\"lg\">\r\n        <Container>\r\n          <Nav.Link href=\"/\">Accueil</Nav.Link>\r\n          <NavDropdown title=\"Connecteurs\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/connecteur/conjonction\">\r\n              Conjonction\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/connecteur/implication\">\r\n              Implication\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"/connecteur/negation\">\r\n              Négation\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/connecteur/disjonction\">\r\n              Disjonction\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/connecteur/equivalence\">\r\n              Equivalence\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"/connecteur\">Connecteurs</NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown title=\"Quantificateurs\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/quantificateur/existence\">\r\n              Quantificateur existenciel\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/quantificateur/universel\">\r\n              Quantificateur universel\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown title=\"Mots-clés\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/motcle/ilexiste\">\r\n              Il existe\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/motcle/montrons\">\r\n              Montrons\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/motcle/posons\">Posons</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/motcle/soit\">Soit</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/motcle/supposons\">\r\n              Supposons\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown title=\"Listes annexes\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/liste/lpu\">\r\n              Liste des propositions utilisables\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/liste/lc\">\r\n              Liste des constantes\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/liste/phrase\">Phrase</NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Heure />\r\n        </Container>\r\n      </Navbar>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n\r\n/* <Navbar bg=\"light\" expand=\"lg\">\r\n  <Container>\r\n    <Navbar.Brand href=\"#home\">Wordlet</Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"me-auto\">\r\n        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n        <Nav.Link href=\"#link\">Link</Nav.Link>\r\n        <NavDropdown title=\"Decoy 6\" id=\"basic-nav-dropdown\">\r\n          <NavDropdown.Item href=\"#action/3.1\">Règles</NavDropdown.Item>\r\n          <NavDropdown.Item href=\"#action/3.2\">Joueur maître</NavDropdown.Item>\r\n          <NavDropdown.Item href=\"#action/3.3\">Autre joueur</NavDropdown.Item>\r\n          <NavDropdown.Divider />\r\n          <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n        </NavDropdown>\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Container>\r\n</Navbar>; \r\n<Outlet />*/\r\n\r\n// style={{\r\n//           borderBottom: 'solid 1px',\r\n//           paddingBottom: '1rem',\r\n//         }}\r\n","import Button from '@restart/ui/esm/Button';\r\nimport Navigation from './components/Navigation';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Ce site\r\n      <Button name=\"\" id=\"\" class=\"btn btn-primary\" href=\"#\" role=\"button\">\r\n        Chien\r\n      </Button>\r\n      <h1>Page d'accueil</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Conjonction = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n\r\n      <div class=\"container\">\r\n        <div class=\"d-flex justify-content-around flex-wrap\">\r\n          <div class=\"col-sm-4\">\r\n            <Card>\r\n              <Card.Header as=\"h5\">Conjonction (connecteur)</Card.Header>\r\n              <Card.Body>\r\n                <p>\r\n                  Étant données $P$ et $Q$ des propositions, <br />\r\n                  la <em>conjonction</em> de $P$ et $Q$ est la proposition qui\r\n                  concentre l'information que les propositions $P$ et $Q$ sont\r\n                  toutes les deux vraies.{' '}\r\n                </p>\r\n              </Card.Body>\r\n            </Card>\r\n            <Card>\r\n              <Card.Header as=\"h5\">Liens</Card.Header>\r\n              <Card.Body>\r\n                <Link to=\"/mot-cle/montrons\" class=\"btn btn-outline-primary\">\r\n                  Montrons (mot-clé)\r\n                </Link>{' '}\r\n                <Link to=\"/mot-cle/ona\" class=\"btn btn-outline-success\">\r\n                  On a (mot-clé)\r\n                </Link>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n          <div class=\"col-sm-4\">\r\n            <Card>\r\n              <Card.Header as=\"h5\">Schémas de $P\\land Q$ </Card.Header>\r\n              <Card.Body>\r\n                <Card.Title>Schéma de démonstration</Card.Title>\r\n                <Card.Text class=\"bd-callout bd-callout-primary\">\r\n                  <ul>\r\n                    <li>Montrons $P$.</li>\r\n                    <li>Montrons $Q$. </li>\r\n                  </ul>\r\n                </Card.Text>\r\n                <Card.Title>Schéma d'utilisation</Card.Title>\r\n                <Card.Text class=\"bd-callout bd-callout-success\">\r\n                  On a $P$. On a $Q$.\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n\r\n          <div class=\"col-sm-4\">\r\n            <Card>\r\n              <Card.Header as=\"h5\">Table de vérité </Card.Header>\r\n              <Card.Body>\r\n                <Table responsive=\"sm\" variant=\"success\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th> $P$</th>\r\n                      <th> $Q$ </th>\r\n                      <th> $P\\land Q$</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td> $V$ </td>\r\n                      <td> $V$ </td>\r\n                      <td> $V$ </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td> $V$ </td>\r\n                      <td> $F$ </td>\r\n                      <td> $F$ </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td> $F$ </td>\r\n                      <td> $V$ </td>\r\n                      <td> $F$ </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td> $F$ </td>\r\n                      <td> $F$ </td>\r\n                      <td> $F$ </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>{' '}\r\n                Autrement dit, $P\\land Q$ est vrai uniquement dans le cas où $P$\r\n                et $Q$ sont toutes les deux vraies.\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conjonction;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\nimport { Card, CardGroup } from 'react-bootstrap';\r\nimport Button from '@restart/ui/esm/Button';\r\nconst Disjonction = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n\r\n      <CardGroup>\r\n        <Card>\r\n          <Card.Header as=\"h5\">Disjonction</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>Schéma de démonstration</Card.Title>\r\n            <Card.Text class=\"text text-success\">\r\n              Supposons $\\neg P$. Montrons $Q$.\r\n            </Card.Text>\r\n            <Button class=\"btn btn-outline-danger\">Exemples</Button>\r\n            <Card.Title>Schéma d'utilisation</Card.Title>\r\n            <Card.Text>Puisque $\\neg P$, on a : $Q$.</Card.Text>\r\n            <Button class=\"btn btn-outline-success\">Exemples</Button>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\r\n          <Card.Body>\r\n            <Card.Title>Card title</Card.Title>\r\n            <Card.Text>\r\n              This is a wider card with supporting text below as a natural\r\n              lead-in to additional content. This content is a little bit\r\n              longer.\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card>\r\n          <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\r\n          <Card.Body>\r\n            <Card.Title>Card title</Card.Title>\r\n            <Card.Text>\r\n              This card has supporting text below as a natural lead-in to\r\n              additional content.{' '}\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card>\r\n          <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\r\n          <Card.Body>\r\n            <Card.Title>Card title</Card.Title>\r\n            <Card.Text>\r\n              This is a wider card with supporting text below as a natural\r\n              lead-in to additional content. This card has even longer content\r\n              than the first to show that equal height action.\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </CardGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Disjonction;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navigation from '../../components/Navigation';\r\nimport { Alert, Card, Table } from 'react-bootstrap';\r\nconst Equivalence = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <div class=\"container\">\r\n        <div class=\"d-flex justify-content-around flex-wrap\">\r\n          <div class=\"col-sm-4\">\r\n            <Card>\r\n              <Card.Header as=\"h5\">Conjonction (connecteur)</Card.Header>\r\n              <Card.Body>\r\n                <p>\r\n                  Étant données $P$ et $Q$ des propositions, <br />\r\n                  la <em>conjonction</em> de $P$ et $Q$ est la proposition qui\r\n                  concentre l'information que les propositions $P$ et $Q$ sont\r\n                  toutes les deux vraies.{' '}\r\n                </p>\r\n              </Card.Body>\r\n            </Card>\r\n            <Card>\r\n              <Card.Header as=\"h5\">Liens</Card.Header>\r\n              <Card.Body>\r\n                <Link to=\"/mot-cle/montrons\" class=\"btn btn-outline-primary\">\r\n                  Montrons (mot-clé)\r\n                </Link>{' '}\r\n                <Link to=\"/mot-cle/ona\" class=\"btn btn-outline-success\">\r\n                  On a (mot-clé)\r\n                </Link>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n          <div class=\"col-sm-4\">\r\n            <Card>\r\n              <Card.Header as=\"h5\">\r\n                Schémas de $P\\Leftrightarrow Q${' '}\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <Card.Title>Schéma de démonstration</Card.Title>\r\n                <Card.Text class=\"bd-callout bd-callout-primary\">\r\n                  <ul>\r\n                    <li>Supposons $P$. Montrons $Q$.</li>\r\n                    <li> Réciproquement, supposons $Q$. Montrons $Q$. </li>\r\n                  </ul>\r\n                </Card.Text>\r\n                <Card.Title>Schéma d'utilisation</Card.Title>\r\n                Sous condition : $P$\r\n                <Card.Text class=\"bd-callout bd-callout-success\">\r\n                  Puisque $P$, on a $Q$.\r\n                </Card.Text>\r\n                Sous condition : $Q$\r\n                <Card.Text class=\"bd-callout bd-callout-success\">\r\n                  Puisque $Q$, on a $P$.\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n\r\n          <div class=\"col-sm-4\">\r\n            <Card>\r\n              <Card.Header as=\"h5\">Table de vérité </Card.Header>\r\n              <Card.Body>\r\n                <Table responsive=\"sm\" variant=\"success\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th> $P$</th>\r\n                      <th> $Q$ </th>\r\n                      <th> $P\\Leftrightarrow Q$</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td> $V$ </td>\r\n                      <td> $V$ </td>\r\n                      <td> $V$ </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td> $V$ </td>\r\n                      <td> $F$ </td>\r\n                      <td> $F$ </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td> $F$ </td>\r\n                      <td> $V$ </td>\r\n                      <td> $F$ </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td> $F$ </td>\r\n                      <td> $F$ </td>\r\n                      <td> $V$ </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>{' '}\r\n                Autrement dit, $P\\Leftrightarrow Q$ est vrai uniquement dans le\r\n                cas où $P$ et $Q$ ont la même valeur de vérité.\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Equivalence;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst Implication = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <div className=\"bd-callout bd-callout-warning\">\r\n        <h4>Schéma de démonstration</h4>\r\n        Supposons $P$, Montrons $Q$.\r\n      </div>\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Schéma d'utilisation</h4>\r\n        Puisque $P$, on a $Q$.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Implication;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Navigation from '../../components/Navigation';\r\nimport Button from '@restart/ui/esm/Button';\r\nimport { Collapse } from 'react-bootstrap';\r\n\r\nconst Negation = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Négation\r\n      <>\r\n        <Button\r\n          onClick={() => setOpen(!open)}\r\n          aria-controls=\"example-collapse-text\"\r\n          aria-expanded={open}\r\n        >\r\n          click\r\n        </Button>\r\n        <Collapse in={open}>\r\n          <div id=\"example-collapse-text\">\r\n            Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus\r\n            terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\r\n            labore wes anderson cred nesciunt sapiente ea proident.\r\n          </div>\r\n        </Collapse>\r\n      </>\r\n      );\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Negation;\r\n","import React from 'react';\r\nimport Navigation from '../components/Navigation';\r\nimport Table from 'react-bootstrap/Table';\r\nimport './Connecteur.css';\r\n\r\nconst Connecteurs = () => {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <Navigation />\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Connecteur</h4>\r\n        Un <em>connecteur</em> est un assemblage qui comporte un symbole\r\n        indiquant sa nature et une ou deux lettres variables qui représentent\r\n        des propositions.\r\n        <ul>\r\n          <li>\r\n            Lorsqu'il y a une seule (resp. deux) lettre(s) variable(s), on place\r\n            le symbole du connecteur à gauche de celle-ci (resp. entre\r\n            celles-ci).\r\n          </li>\r\n          <li>\r\n            {' '}\r\n            La valeur de vérité de la proposition ainsi formée est déterminée\r\n            par celles des propositions données par une <em>table de vérité</em>\r\n            . Les tables de vérité servent essentiellement à démontrer des\r\n            relations logiques entre connecteurs.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <Table responsive=\"sm\" variant=\"success\">\r\n        <thead>\r\n          <tr>\r\n            <th>Connecteur</th>\r\n            <th>symbole </th>\r\n            <th>Notation usuelle</th>\r\n            <th>Définition</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Conjonction de $P$ et $Q$</td>\r\n            <td>$P\\land Q$</td>\r\n            <td>On a : $P$ et $Q$.</td>\r\n            <td></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Implication de $P$ vers $Q$</td>\r\n            <td>$P\\Rightarrow Q$</td>\r\n            <td>Si $P$ alors $Q$.</td>\r\n            <td></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Négation de $P$</td>\r\n            <td>$\\neg P$</td>\r\n            <td>On n'a pas $P$.</td>\r\n            <td>$P\\Rightarrow F$</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Disjonction de $P$ et $Q$</td>\r\n            <td>$P \\lor Q$</td>\r\n            <td>On a : $P$ ou $Q$.</td>\r\n            <td>$\\neg P\\Rightarrow Q$</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Equivalence entre $P$ et $Q$</td>\r\n            <td>$P\\Leftrightarrow Q$</td>\r\n            <td>On a : $P$ si et seulement si $Q$.</td>\r\n            <td>$(P\\Rightarrow Q)\\land(Q\\Rightarrow P)$</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Connecteurs;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst Existence = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Existence\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Existence;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst Universel = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Universel\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Universel;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst IlExiste = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      IlExiste\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IlExiste;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst Montrons = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Montrons\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Montrons;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst Posons = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Posons\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posons;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst Soit = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      Soit\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Soit;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Supposons = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />{' '}\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Text class=\"text text-success\">\r\n            <Table responsive=\"sm\" variant=\"success\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Supposons</th>\r\n                  <th> </th>\r\n                  <th> Commentaire</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>syntaxe : </td>\r\n                  <td>Supposons $P$. ($P$ proposition)</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>action : </td>\r\n                  <td>\r\n                    Ajoute $P$ à{' '}\r\n                    <Link to=\"/liste/LPU\" class=\"btn btn-outline-primary\">\r\n                      {' '}\r\n                      LPU\r\n                    </Link>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>usage : </td>\r\n                  <td>\r\n                    <Link\r\n                      to=\"/connecteur/implication\"\r\n                      class=\"btn btn-outline-primary\"\r\n                    >\r\n                      <b> [SU] </b>Implication\r\n                    </Link>{' '}\r\n                    <Link\r\n                      to=\"/connecteur/conjonction\"\r\n                      class=\"btn btn-outline-primary\"\r\n                    >\r\n                      <b> [SU] </b>Conjonction\r\n                    </Link>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Supposons;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\n\r\nconst LC = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      LC\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LC;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\nimport Table from 'react-bootstrap/Table';\r\nimport './LPU.css';\r\n\r\nconst LPU = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Liste des propositions utilisables (LPU)</h4>\r\n        La <em>LPU</em> est une liste annexée à une démonstration qui permet de\r\n        gérer la <em>dynamique</em> de celle-ci. indiquant sa nature et une ou\r\n        deux lettres variables qui représentent des propositions.\r\n        <ul>\r\n          <li>\r\n            La <em>dynamique</em> d'une démonstration est la façon dont les\r\n            données concernant cette démonstration évolue à chaque phrase.\r\n          </li>\r\n          <li>\r\n            {' '}\r\n            La valeur de vérité de la proposition ainsi formée est déterminée\r\n            par celles des propositions données par une <em>table de vérité</em>\r\n            . Les tables de vérité servent essentiellement à démontrer des\r\n            relations logiques entre connecteurs.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <Table responsive=\"sm\" variant=\"success\">\r\n        <thead>\r\n          <tr>\r\n            <th>Connecteur</th>\r\n            <th>symbole </th>\r\n            <th>Notation usuelle</th>\r\n            <th>Définition</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Conjonction de $P$ et $Q$</td>\r\n            <td>$P\\land Q$</td>\r\n            <td>On a : $P$ et $Q$.</td>\r\n            <td></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Implication de $P$ vers $Q$</td>\r\n            <td>$P\\Rightarrow Q$</td>\r\n            <td>Si $P$ alors $Q$.</td>\r\n            <td></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Négation de $P$</td>\r\n            <td>$\\neg P$</td>\r\n            <td>On n'a pas $P$.</td>\r\n            <td>$P\\Rightarrow F$</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Disjonction de $P$ et $Q$</td>\r\n            <td>$P \\lor Q$</td>\r\n            <td>On a : $P$ ou $Q$.</td>\r\n            <td>$\\neg P\\Rightarrow Q$</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Equivalence entre $P$ et $Q$</td>\r\n            <td>$P\\Leftrightarrow Q$</td>\r\n            <td>On a : $P$ si et seulement si $Q$.</td>\r\n            <td>$(P\\Rightarrow Q)\\land(Q\\Rightarrow P)$</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LPU;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation';\r\nimport Table from 'react-bootstrap/Table';\r\nimport './LPU.css';\r\n\r\nconst Phrase = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Phrase</h4>\r\n        Dans une démonstration, une <em>phrase</em> est une unité sémentique\r\n        (unité de sens) atomique (la plus petite possible). Elle constitue une\r\n        instruction (c'est-à-dire qu'elle explique ce qu'il faut faire à ce\r\n        moment là).\r\n        <ul>\r\n          <li>\r\n            Une phrase commence par une majuscule et se termine par un point.\r\n          </li>\r\n          <li>\r\n            Une phrase contient un mot-clé qui impose sa syntaxe et définit son\r\n            action.\r\n          </li>\r\n          <li>\r\n            Une phrase interagit avec la LPU et la LC en fonction de son\r\n            mot-clé.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Propriété (langage courant)</h4>\r\n        La somme de deux nombres pairs est paire.\r\n      </div>\r\n\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Propriété (langage formalisé)</h4>\r\n        $(\\forall m\\in\\mathbb Z)\\,(\\forall n\\in\\mathbb Z)$ $(m$ pair $\\land$ $n$\r\n        pair$)\\,\\Rightarrow\\,m+n$ pair\r\n      </div>\r\n      <div className=\"bd-callout bd-callout-success\">\r\n        <h4>Démonstration</h4>\r\n        Soit $m\\in\\mathbb Z$. Soit $m\\in\\mathbb Z$. Supposons $m$ pair $\\land$\r\n        $n$ pair. On a $m$ pair. Il existe $k\\in\\mathbb Z$ tel que $m=2k$. On a\r\n        $n$ pair. Il existe $l\\in\\mathbb Z$ tel que $n=2l$. Montrons que $m+n$\r\n        est pair. Posons $s=k+l\\in\\mathbb Z$. On a : $m+n=2k+2l=2(k+l)=2s$.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phrase;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport Conjonction from './pages/connecteur/Conjonction';\r\nimport Disjonction from './pages/connecteur/Disjonction';\r\nimport Equivalence from './pages/connecteur/Equivalence';\r\nimport Implication from './pages/connecteur/Implication';\r\nimport Negation from './pages/connecteur/Negation';\r\nimport Connecteurs from './pages/Connecteurs';\r\nimport Existence from './pages/quantificateur/Existence';\r\nimport Universel from './pages/quantificateur/Universel';\r\nimport IlExiste from './pages/mot-cle/IlExiste';\r\nimport Montrons from './pages/mot-cle/Montrons';\r\nimport Posons from './pages/mot-cle/Posons';\r\nimport Soit from './pages/mot-cle/Soit';\r\nimport Supposons from './pages/mot-cle/Supposons';\r\nimport LC from './pages/liste/LC';\r\nimport LPU from './pages/liste/LPU';\r\nimport Phrase from './pages/liste/Phrase';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<App />} />\r\n        <Route path=\"connecteur\" element={<Connecteurs />} />\r\n        <Route path=\"connecteur/conjonction\" element={<Conjonction />} />\r\n        <Route path=\"connecteur/disjonction\" element={<Disjonction />} />\r\n        <Route path=\"connecteur/equivalence\" element={<Equivalence />} />\r\n        <Route path=\"connecteur/implication\" element={<Implication />} />\r\n        <Route path=\"connecteur/negation\" element={<Negation />} />\r\n        <Route path=\"quantificateur/existence\" element={<Existence />} />\r\n        <Route path=\"quantificateur/universel\" element={<Universel />} />\r\n        <Route path=\"liste/lc\" element={<LC />} />\r\n        <Route path=\"liste/lpu\" element={<LPU />} />\r\n        <Route path=\"liste/phrase\" element={<Phrase />} />\r\n        <Route path=\"motcle/ilexiste\" element={<IlExiste />} />\r\n        <Route path=\"motcle/montrons\" element={<Montrons />} />\r\n        <Route path=\"motcle/posons\" element={<Posons />} />\r\n        <Route path=\"motcle/soit\" element={<Soit />} />\r\n        <Route path=\"motcle/supposons\" element={<Supposons />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}